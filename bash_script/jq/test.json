{
    "apiVersion": "v1",
    "items": [
        {
            "apiVersion": "apps/v1",
            "kind": "StatefulSet",
            "metadata": {
                "annotations": {
                    "esMajorVersion": "7",
                    "meta.helm.sh/release-name": "prerequisites",
                    "meta.helm.sh/release-namespace": "default"
                },
                "creationTimestamp": "2023-07-15T08:35:56Z",
                "deletionGracePeriodSeconds": 0,
                "deletionTimestamp": "2023-07-16T08:35:38Z",
                "finalizers": [
                    "foregroundDeletion"
                ],
                "generation": 2,
                "labels": {
                    "app": "elasticsearch-master",
                    "app.kubernetes.io/managed-by": "Helm",
                    "chart": "elasticsearch",
                    "heritage": "Helm",
                    "release": "prerequisites"
                },
                "name": "elasticsearch-master",
                "namespace": "default",
                "resourceVersion": "70500",
                "uid": "dd09e9b8-db84-46ad-a5cc-16edc0fbf81b"
            },
            "spec": {
                "podManagementPolicy": "Parallel",
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "app": "elasticsearch-master"
                    }
                },
                "serviceName": "elasticsearch-master-headless",
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "app": "elasticsearch-master",
                            "chart": "elasticsearch",
                            "release": "prerequisites"
                        },
                        "name": "elasticsearch-master"
                    },
                    "spec": {
                        "affinity": {
                            "podAntiAffinity": {
                                "preferredDuringSchedulingIgnoredDuringExecution": [
                                    {
                                        "podAffinityTerm": {
                                            "labelSelector": {
                                                "matchExpressions": [
                                                    {
                                                        "key": "app",
                                                        "operator": "In",
                                                        "values": [
                                                            "elasticsearch-master"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "topologyKey": "kubernetes.io/hostname"
                                        },
                                        "weight": 1
                                    }
                                ]
                            }
                        },
                        "automountServiceAccountToken": true,
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "node.name",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "cluster.initial_master_nodes",
                                        "value": "elasticsearch-master-0,"
                                    },
                                    {
                                        "name": "discovery.seed_hosts",
                                        "value": "elasticsearch-master-headless"
                                    },
                                    {
                                        "name": "cluster.name",
                                        "value": "elasticsearch"
                                    },
                                    {
                                        "name": "network.host",
                                        "value": "0.0.0.0"
                                    },
                                    {
                                        "name": "cluster.deprecation_indexing.enabled",
                                        "value": "false"
                                    },
                                    {
                                        "name": "ES_JAVA_OPTS",
                                        "value": "-Xmx384m -Xms384m"
                                    },
                                    {
                                        "name": "node.data",
                                        "value": "true"
                                    },
                                    {
                                        "name": "node.ingest",
                                        "value": "true"
                                    },
                                    {
                                        "name": "node.master",
                                        "value": "true"
                                    },
                                    {
                                        "name": "node.ml",
                                        "value": "true"
                                    },
                                    {
                                        "name": "node.remote_cluster_client",
                                        "value": "true"
                                    }
                                ],
                                "image": "docker.elastic.co/elasticsearch/elasticsearch:7.17.3",
                                "imagePullPolicy": "IfNotPresent",
                                "name": "elasticsearch",
                                "ports": [
                                    {
                                        "containerPort": 9200,
                                        "name": "http",
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 9300,
                                        "name": "transport",
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "bash",
                                            "-c",
                                            "set -e\n# If the node is starting up wait for the cluster to be ready (request params: \"wait_for_status=yellow\u0026timeout=1s\" )\n# Once it has started only check that the node itself is responding\nSTART_FILE=/tmp/.es_start_file\n\n# Disable nss cache to avoid filling dentry cache when calling curl\n# This is required with Elasticsearch Docker using nss \u003c 3.52\nexport NSS_SDB_USE_CACHE=no\n\nhttp () {\n  local path=\"${1}\"\n  local args=\"${2}\"\n  set -- -XGET -s\n\n  if [ \"$args\" != \"\" ]; then\n    set -- \"$@\" $args\n  fi\n\n  if [ -n \"${ELASTIC_PASSWORD}\" ]; then\n    set -- \"$@\" -u \"elastic:${ELASTIC_PASSWORD}\"\n  fi\n\n  curl --output /dev/null -k \"$@\" \"http://127.0.0.1:9200${path}\"\n}\n\nif [ -f \"${START_FILE}\" ]; then\n  echo 'Elasticsearch is already running, lets check the node is healthy'\n  HTTP_CODE=$(http \"/\" \"-w %{http_code}\")\n  RC=$?\n  if [[ ${RC} -ne 0 ]]; then\n    echo \"curl --output /dev/null -k -XGET -s -w '%{http_code}' \\${BASIC_AUTH} http://127.0.0.1:9200/ failed with RC ${RC}\"\n    exit ${RC}\n  fi\n  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x\n  if [[ ${HTTP_CODE} == \"200\" ]]; then\n    exit 0\n  elif [[ ${HTTP_CODE} == \"503\" \u0026\u0026 \"7\" == \"6\" ]]; then\n    exit 0\n  else\n    echo \"curl --output /dev/null -k -XGET -s -w '%{http_code}' \\${BASIC_AUTH} http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}\"\n    exit 1\n  fi\n\nelse\n  echo 'Waiting for elasticsearch cluster to become ready (request params: \"wait_for_status=yellow\u0026timeout=1s\" )'\n  if http \"/_cluster/health?wait_for_status=yellow\u0026timeout=1s\" \"--fail\" ; then\n    touch ${START_FILE}\n    exit 0\n  else\n    echo 'Cluster is not yet ready (request params: \"wait_for_status=yellow\u0026timeout=1s\" )'\n    exit 1\n  fi\nfi\n"
                                        ]
                                    },
                                    "failureThreshold": 3,
                                    "initialDelaySeconds": 10,
                                    "periodSeconds": 10,
                                    "successThreshold": 3,
                                    "timeoutSeconds": 5
                                },
                                "resources": {
                                    "limits": {
                                        "cpu": "1",
                                        "memory": "768M"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "768M"
                                    }
                                },
                                "securityContext": {
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "runAsNonRoot": true,
                                    "runAsUser": 1000
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/usr/share/elasticsearch/data",
                                        "name": "elasticsearch-master"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "enableServiceLinks": true,
                        "initContainers": [
                            {
                                "command": [
                                    "sysctl",
                                    "-w",
                                    "vm.max_map_count=262144"
                                ],
                                "image": "docker.elastic.co/elasticsearch/elasticsearch:7.17.3",
                                "imagePullPolicy": "IfNotPresent",
                                "name": "configure-sysctl",
                                "resources": {},
                                "securityContext": {
                                    "privileged": true,
                                    "runAsUser": 0
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File"
                            }
                        ],
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {
                            "fsGroup": 1000,
                            "runAsUser": 1000
                        },
                        "terminationGracePeriodSeconds": 120
                    }
                },
                "updateStrategy": {
                    "type": "RollingUpdate"
                },
                "volumeClaimTemplates": [
                    {
                        "apiVersion": "v1",
                        "kind": "PersistentVolumeClaim",
                        "metadata": {
                            "creationTimestamp": null,
                            "name": "elasticsearch-master"
                        },
                        "spec": {
                            "accessModes": [
                                "ReadWriteOnce"
                            ],
                            "resources": {
                                "requests": {
                                    "storage": "30Gi"
                                }
                            },
                            "volumeMode": "Filesystem"
                        },
                        "status": {
                            "phase": "Pending"
                        }
                    }
                ]
            },
            "status": {
                "availableReplicas": 0,
                "collisionCount": 0,
                "currentRevision": "elasticsearch-master-7dc7ff7df4",
                "observedGeneration": 2,
                "replicas": 1,
                "updateRevision": "elasticsearch-master-7dc7ff7df4"
            }
        },
        {
            "apiVersion": "apps/v1",
            "kind": "StatefulSet",
            "metadata": {
                "annotations": {
                    "meta.helm.sh/release-name": "my-postgresql",
                    "meta.helm.sh/release-namespace": "default"
                },
                "creationTimestamp": "2023-07-15T09:56:10Z",
                "generation": 1,
                "labels": {
                    "app.kubernetes.io/component": "primary",
                    "app.kubernetes.io/instance": "my-postgresql",
                    "app.kubernetes.io/managed-by": "Helm",
                    "app.kubernetes.io/name": "postgresql",
                    "helm.sh/chart": "postgresql-12.6.6"
                },
                "name": "my-postgresql",
                "namespace": "default",
                "resourceVersion": "62315",
                "uid": "2cb2e369-91cd-4415-9133-aba4863ceb93"
            },
            "spec": {
                "podManagementPolicy": "OrderedReady",
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "app.kubernetes.io/component": "primary",
                        "app.kubernetes.io/instance": "my-postgresql",
                        "app.kubernetes.io/name": "postgresql"
                    }
                },
                "serviceName": "my-postgresql-hl",
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "app.kubernetes.io/component": "primary",
                            "app.kubernetes.io/instance": "my-postgresql",
                            "app.kubernetes.io/managed-by": "Helm",
                            "app.kubernetes.io/name": "postgresql",
                            "helm.sh/chart": "postgresql-12.6.6"
                        },
                        "name": "my-postgresql"
                    },
                    "spec": {
                        "affinity": {
                            "podAntiAffinity": {
                                "preferredDuringSchedulingIgnoredDuringExecution": [
                                    {
                                        "podAffinityTerm": {
                                            "labelSelector": {
                                                "matchLabels": {
                                                    "app.kubernetes.io/component": "primary",
                                                    "app.kubernetes.io/instance": "my-postgresql",
                                                    "app.kubernetes.io/name": "postgresql"
                                                }
                                            },
                                            "topologyKey": "kubernetes.io/hostname"
                                        },
                                        "weight": 1
                                    }
                                ]
                            }
                        },
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "BITNAMI_DEBUG",
                                        "value": "false"
                                    },
                                    {
                                        "name": "POSTGRESQL_PORT_NUMBER",
                                        "value": "5432"
                                    },
                                    {
                                        "name": "POSTGRESQL_VOLUME_DIR",
                                        "value": "/bitnami/postgresql"
                                    },
                                    {
                                        "name": "PGDATA",
                                        "value": "/bitnami/postgresql/data"
                                    },
                                    {
                                        "name": "POSTGRES_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "postgres-password",
                                                "name": "my-postgresql"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POSTGRESQL_ENABLE_LDAP",
                                        "value": "no"
                                    },
                                    {
                                        "name": "POSTGRESQL_ENABLE_TLS",
                                        "value": "no"
                                    },
                                    {
                                        "name": "POSTGRESQL_LOG_HOSTNAME",
                                        "value": "false"
                                    },
                                    {
                                        "name": "POSTGRESQL_LOG_CONNECTIONS",
                                        "value": "false"
                                    },
                                    {
                                        "name": "POSTGRESQL_LOG_DISCONNECTIONS",
                                        "value": "false"
                                    },
                                    {
                                        "name": "POSTGRESQL_PGAUDIT_LOG_CATALOG",
                                        "value": "off"
                                    },
                                    {
                                        "name": "POSTGRESQL_CLIENT_MIN_MESSAGES",
                                        "value": "error"
                                    },
                                    {
                                        "name": "POSTGRESQL_SHARED_PRELOAD_LIBRARIES",
                                        "value": "pgaudit"
                                    }
                                ],
                                "image": "docker.io/bitnami/postgresql:15.3.0-debian-11-r24",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "exec": {
                                        "command": [
                                            "/bin/sh",
                                            "-c",
                                            "exec pg_isready -U \"postgres\" -h 127.0.0.1 -p 5432"
                                        ]
                                    },
                                    "failureThreshold": 6,
                                    "initialDelaySeconds": 30,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 5
                                },
                                "name": "postgresql",
                                "ports": [
                                    {
                                        "containerPort": 5432,
                                        "name": "tcp-postgresql",
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/bin/sh",
                                            "-c",
                                            "-e",
                                            "exec pg_isready -U \"postgres\" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n"
                                        ]
                                    },
                                    "failureThreshold": 6,
                                    "initialDelaySeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 5
                                },
                                "resources": {
                                    "requests": {
                                        "cpu": "250m",
                                        "memory": "256Mi"
                                    }
                                },
                                "securityContext": {
                                    "runAsUser": 1001
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/dev/shm",
                                        "name": "dshm"
                                    },
                                    {
                                        "mountPath": "/bitnami/postgresql",
                                        "name": "data"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {
                            "fsGroup": 1001
                        },
                        "serviceAccount": "default",
                        "serviceAccountName": "default",
                        "terminationGracePeriodSeconds": 30,
                        "volumes": [
                            {
                                "emptyDir": {
                                    "medium": "Memory"
                                },
                                "name": "dshm"
                            }
                        ]
                    }
                },
                "updateStrategy": {
                    "rollingUpdate": {
                        "partition": 0
                    },
                    "type": "RollingUpdate"
                },
                "volumeClaimTemplates": [
                    {
                        "apiVersion": "v1",
                        "kind": "PersistentVolumeClaim",
                        "metadata": {
                            "creationTimestamp": null,
                            "name": "data"
                        },
                        "spec": {
                            "accessModes": [
                                "ReadWriteOnce"
                            ],
                            "resources": {
                                "requests": {
                                    "storage": "8Gi"
                                }
                            },
                            "volumeMode": "Filesystem"
                        },
                        "status": {
                            "phase": "Pending"
                        }
                    }
                ]
            },
            "status": {
                "availableReplicas": 0,
                "collisionCount": 0,
                "currentRevision": "my-postgresql-799df758bb",
                "observedGeneration": 1,
                "replicas": 1,
                "updateRevision": "my-postgresql-799df758bb"
            }
        },
        {
            "apiVersion": "apps/v1",
            "kind": "StatefulSet",
            "metadata": {
                "annotations": {
                    "meta.helm.sh/release-name": "prerequisites",
                    "meta.helm.sh/release-namespace": "default"
                },
                "creationTimestamp": "2023-07-15T08:35:56Z",
                "deletionGracePeriodSeconds": 0,
                "deletionTimestamp": "2023-07-16T08:35:33Z",
                "finalizers": [
                    "foregroundDeletion"
                ],
                "generation": 2,
                "labels": {
                    "app.kubernetes.io/component": "kafka",
                    "app.kubernetes.io/instance": "prerequisites",
                    "app.kubernetes.io/managed-by": "Helm",
                    "app.kubernetes.io/name": "kafka",
                    "helm.sh/chart": "kafka-22.1.3"
                },
                "name": "prerequisites-kafka",
                "namespace": "default",
                "resourceVersion": "70490",
                "uid": "ef2f6882-0692-45f0-80fc-f80932399df2"
            },
            "spec": {
                "podManagementPolicy": "Parallel",
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "app.kubernetes.io/component": "kafka",
                        "app.kubernetes.io/instance": "prerequisites",
                        "app.kubernetes.io/name": "kafka"
                    }
                },
                "serviceName": "prerequisites-kafka-headless",
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "app.kubernetes.io/component": "kafka",
                            "app.kubernetes.io/instance": "prerequisites",
                            "app.kubernetes.io/managed-by": "Helm",
                            "app.kubernetes.io/name": "kafka",
                            "helm.sh/chart": "kafka-22.1.3"
                        }
                    },
                    "spec": {
                        "affinity": {
                            "podAntiAffinity": {
                                "preferredDuringSchedulingIgnoredDuringExecution": [
                                    {
                                        "podAffinityTerm": {
                                            "labelSelector": {
                                                "matchLabels": {
                                                    "app.kubernetes.io/component": "kafka",
                                                    "app.kubernetes.io/instance": "prerequisites",
                                                    "app.kubernetes.io/name": "kafka"
                                                }
                                            },
                                            "topologyKey": "kubernetes.io/hostname"
                                        },
                                        "weight": 1
                                    }
                                ]
                            }
                        },
                        "containers": [
                            {
                                "command": [
                                    "/scripts/setup.sh"
                                ],
                                "env": [
                                    {
                                        "name": "BITNAMI_DEBUG",
                                        "value": "false"
                                    },
                                    {
                                        "name": "MY_POD_IP",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "status.podIP"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MY_POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "KAFKA_CFG_ZOOKEEPER_CONNECT",
                                        "value": "prerequisites-zookeeper"
                                    },
                                    {
                                        "name": "KAFKA_INTER_BROKER_LISTENER_NAME",
                                        "value": "INTERNAL"
                                    },
                                    {
                                        "name": "KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP",
                                        "value": "INTERNAL:PLAINTEXT,CLIENT:PLAINTEXT"
                                    },
                                    {
                                        "name": "KAFKA_CFG_LISTENERS",
                                        "value": "INTERNAL://:9094,CLIENT://:9092"
                                    },
                                    {
                                        "name": "KAFKA_CFG_ADVERTISED_LISTENERS",
                                        "value": "INTERNAL://$(MY_POD_NAME).prerequisites-kafka-headless.default.svc.cluster.local:9094,CLIENT://$(MY_POD_NAME).prerequisites-kafka-headless.default.svc.cluster.local:9092"
                                    },
                                    {
                                        "name": "ALLOW_PLAINTEXT_LISTENER",
                                        "value": "yes"
                                    },
                                    {
                                        "name": "KAFKA_ZOOKEEPER_PROTOCOL",
                                        "value": "PLAINTEXT"
                                    },
                                    {
                                        "name": "KAFKA_VOLUME_DIR",
                                        "value": "/bitnami/kafka"
                                    },
                                    {
                                        "name": "KAFKA_LOG_DIR",
                                        "value": "/opt/bitnami/kafka/logs"
                                    },
                                    {
                                        "name": "KAFKA_CFG_DELETE_TOPIC_ENABLE",
                                        "value": "false"
                                    },
                                    {
                                        "name": "KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE",
                                        "value": "true"
                                    },
                                    {
                                        "name": "KAFKA_HEAP_OPTS",
                                        "value": "-Xmx1024m -Xms1024m"
                                    },
                                    {
                                        "name": "KAFKA_CFG_LOG_FLUSH_INTERVAL_MESSAGES",
                                        "value": "10000"
                                    },
                                    {
                                        "name": "KAFKA_CFG_LOG_FLUSH_INTERVAL_MS",
                                        "value": "1000"
                                    },
                                    {
                                        "name": "KAFKA_CFG_LOG_RETENTION_BYTES",
                                        "value": "1073741824"
                                    },
                                    {
                                        "name": "KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS",
                                        "value": "300000"
                                    },
                                    {
                                        "name": "KAFKA_CFG_LOG_RETENTION_HOURS",
                                        "value": "168"
                                    },
                                    {
                                        "name": "KAFKA_CFG_MESSAGE_MAX_BYTES",
                                        "value": "1000012"
                                    },
                                    {
                                        "name": "KAFKA_CFG_LOG_SEGMENT_BYTES",
                                        "value": "1073741824"
                                    },
                                    {
                                        "name": "KAFKA_CFG_LOG_DIRS",
                                        "value": "/bitnami/kafka/data"
                                    },
                                    {
                                        "name": "KAFKA_CFG_DEFAULT_REPLICATION_FACTOR",
                                        "value": "1"
                                    },
                                    {
                                        "name": "KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR",
                                        "value": "1"
                                    },
                                    {
                                        "name": "KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR",
                                        "value": "1"
                                    },
                                    {
                                        "name": "KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR",
                                        "value": "1"
                                    },
                                    {
                                        "name": "KAFKA_CFG_NUM_IO_THREADS",
                                        "value": "8"
                                    },
                                    {
                                        "name": "KAFKA_CFG_NUM_NETWORK_THREADS",
                                        "value": "3"
                                    },
                                    {
                                        "name": "KAFKA_CFG_NUM_PARTITIONS",
                                        "value": "1"
                                    },
                                    {
                                        "name": "KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR",
                                        "value": "1"
                                    },
                                    {
                                        "name": "KAFKA_CFG_SOCKET_RECEIVE_BUFFER_BYTES",
                                        "value": "102400"
                                    },
                                    {
                                        "name": "KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES",
                                        "value": "104857600"
                                    },
                                    {
                                        "name": "KAFKA_CFG_SOCKET_SEND_BUFFER_BYTES",
                                        "value": "102400"
                                    },
                                    {
                                        "name": "KAFKA_CFG_ZOOKEEPER_CONNECTION_TIMEOUT_MS",
                                        "value": "6000"
                                    },
                                    {
                                        "name": "KAFKA_CFG_AUTHORIZER_CLASS_NAME"
                                    },
                                    {
                                        "name": "KAFKA_CFG_ALLOW_EVERYONE_IF_NO_ACL_FOUND",
                                        "value": "true"
                                    },
                                    {
                                        "name": "KAFKA_CFG_SUPER_USERS",
                                        "value": "User:admin"
                                    },
                                    {
                                        "name": "KAFKA_ENABLE_KRAFT",
                                        "value": "false"
                                    },
                                    {
                                        "name": "KAFKA_ENABLE_KRAFT",
                                        "value": "false"
                                    }
                                ],
                                "image": "docker.io/bitnami/kafka:3.4.0-debian-11-r33",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "failureThreshold": 3,
                                    "initialDelaySeconds": 10,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "tcpSocket": {
                                        "port": "kafka-client"
                                    },
                                    "timeoutSeconds": 5
                                },
                                "name": "kafka",
                                "ports": [
                                    {
                                        "containerPort": 9092,
                                        "name": "kafka-client",
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 9094,
                                        "name": "kafka-internal",
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "failureThreshold": 6,
                                    "initialDelaySeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "tcpSocket": {
                                        "port": "kafka-client"
                                    },
                                    "timeoutSeconds": 5
                                },
                                "resources": {},
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "runAsNonRoot": true,
                                    "runAsUser": 1001
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/bitnami/kafka",
                                        "name": "data"
                                    },
                                    {
                                        "mountPath": "/opt/bitnami/kafka/logs",
                                        "name": "logs"
                                    },
                                    {
                                        "mountPath": "/scripts/setup.sh",
                                        "name": "scripts",
                                        "subPath": "setup.sh"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {
                            "fsGroup": 1001
                        },
                        "serviceAccount": "prerequisites-kafka",
                        "serviceAccountName": "prerequisites-kafka",
                        "terminationGracePeriodSeconds": 30,
                        "volumes": [
                            {
                                "configMap": {
                                    "defaultMode": 493,
                                    "name": "prerequisites-kafka-scripts"
                                },
                                "name": "scripts"
                            },
                            {
                                "emptyDir": {},
                                "name": "logs"
                            }
                        ]
                    }
                },
                "updateStrategy": {
                    "rollingUpdate": {
                        "partition": 0
                    },
                    "type": "RollingUpdate"
                },
                "volumeClaimTemplates": [
                    {
                        "apiVersion": "v1",
                        "kind": "PersistentVolumeClaim",
                        "metadata": {
                            "creationTimestamp": null,
                            "name": "data"
                        },
                        "spec": {
                            "accessModes": [
                                "ReadWriteOnce"
                            ],
                            "resources": {
                                "requests": {
                                    "storage": "8Gi"
                                }
                            },
                            "volumeMode": "Filesystem"
                        },
                        "status": {
                            "phase": "Pending"
                        }
                    }
                ]
            },
            "status": {
                "availableReplicas": 0,
                "collisionCount": 0,
                "currentRevision": "prerequisites-kafka-7487b899cb",
                "observedGeneration": 2,
                "replicas": 1,
                "updateRevision": "prerequisites-kafka-7487b899cb"
            }
        },
        {
            "apiVersion": "apps/v1",
            "kind": "StatefulSet",
            "metadata": {
                "annotations": {
                    "meta.helm.sh/release-name": "prerequisites",
                    "meta.helm.sh/release-namespace": "default"
                },
                "creationTimestamp": "2023-07-15T08:35:56Z",
                "deletionGracePeriodSeconds": 0,
                "deletionTimestamp": "2023-07-16T08:35:27Z",
                "finalizers": [
                    "foregroundDeletion"
                ],
                "generation": 2,
                "labels": {
                    "app.kubernetes.io/component": "primary",
                    "app.kubernetes.io/instance": "prerequisites",
                    "app.kubernetes.io/managed-by": "Helm",
                    "app.kubernetes.io/name": "mysql",
                    "helm.sh/chart": "mysql-9.1.8"
                },
                "name": "prerequisites-mysql",
                "namespace": "default",
                "resourceVersion": "70479",
                "uid": "cf75b08a-3a6e-472e-85c2-4f907095e165"
            },
            "spec": {
                "podManagementPolicy": "OrderedReady",
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "app.kubernetes.io/component": "primary",
                        "app.kubernetes.io/instance": "prerequisites",
                        "app.kubernetes.io/name": "mysql"
                    }
                },
                "serviceName": "prerequisites-mysql",
                "template": {
                    "metadata": {
                        "annotations": {
                            "checksum/configuration": "f4319d4718b248202e23fec5a6be3eedfab5c74178052f0ef5ce1fd05b945270"
                        },
                        "creationTimestamp": null,
                        "labels": {
                            "app.kubernetes.io/component": "primary",
                            "app.kubernetes.io/instance": "prerequisites",
                            "app.kubernetes.io/managed-by": "Helm",
                            "app.kubernetes.io/name": "mysql",
                            "helm.sh/chart": "mysql-9.1.8"
                        }
                    },
                    "spec": {
                        "affinity": {
                            "podAntiAffinity": {
                                "preferredDuringSchedulingIgnoredDuringExecution": [
                                    {
                                        "podAffinityTerm": {
                                            "labelSelector": {
                                                "matchLabels": {
                                                    "app.kubernetes.io/instance": "prerequisites",
                                                    "app.kubernetes.io/name": "mysql"
                                                }
                                            },
                                            "topologyKey": "kubernetes.io/hostname"
                                        },
                                        "weight": 1
                                    }
                                ]
                            }
                        },
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "BITNAMI_DEBUG",
                                        "value": "false"
                                    },
                                    {
                                        "name": "MYSQL_ROOT_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "mysql-root-password",
                                                "name": "mysql-secrets"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MYSQL_DATABASE",
                                        "value": "my_database"
                                    }
                                ],
                                "image": "docker.io/bitnami/mysql:8.0.29-debian-11-r3",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "exec": {
                                        "command": [
                                            "/bin/bash",
                                            "-ec",
                                            "password_aux=\"${MYSQL_ROOT_PASSWORD:-}\"\nif [[ -f \"${MYSQL_ROOT_PASSWORD_FILE:-}\" ]]; then\n    password_aux=$(cat \"$MYSQL_ROOT_PASSWORD_FILE\")\nfi\nmysqladmin status -uroot -p\"${password_aux}\"\n"
                                        ]
                                    },
                                    "failureThreshold": 3,
                                    "initialDelaySeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "name": "mysql",
                                "ports": [
                                    {
                                        "containerPort": 3306,
                                        "name": "mysql",
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/bin/bash",
                                            "-ec",
                                            "password_aux=\"${MYSQL_ROOT_PASSWORD:-}\"\nif [[ -f \"${MYSQL_ROOT_PASSWORD_FILE:-}\" ]]; then\n    password_aux=$(cat \"$MYSQL_ROOT_PASSWORD_FILE\")\nfi\nmysqladmin status -uroot -p\"${password_aux}\"\n"
                                        ]
                                    },
                                    "failureThreshold": 3,
                                    "initialDelaySeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "resources": {},
                                "securityContext": {
                                    "runAsNonRoot": true,
                                    "runAsUser": 1001
                                },
                                "startupProbe": {
                                    "exec": {
                                        "command": [
                                            "/bin/bash",
                                            "-ec",
                                            "password_aux=\"${MYSQL_ROOT_PASSWORD:-}\"\nif [[ -f \"${MYSQL_ROOT_PASSWORD_FILE:-}\" ]]; then\n    password_aux=$(cat \"$MYSQL_ROOT_PASSWORD_FILE\")\nfi\nmysqladmin status -uroot -p\"${password_aux}\"\n"
                                        ]
                                    },
                                    "failureThreshold": 10,
                                    "initialDelaySeconds": 15,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/bitnami/mysql",
                                        "name": "data"
                                    },
                                    {
                                        "mountPath": "/opt/bitnami/mysql/conf/my.cnf",
                                        "name": "config",
                                        "subPath": "my.cnf"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {
                            "fsGroup": 1001
                        },
                        "serviceAccount": "prerequisites-mysql",
                        "serviceAccountName": "prerequisites-mysql",
                        "terminationGracePeriodSeconds": 30,
                        "volumes": [
                            {
                                "configMap": {
                                    "defaultMode": 420,
                                    "name": "prerequisites-mysql"
                                },
                                "name": "config"
                            }
                        ]
                    }
                },
                "updateStrategy": {
                    "type": "RollingUpdate"
                },
                "volumeClaimTemplates": [
                    {
                        "apiVersion": "v1",
                        "kind": "PersistentVolumeClaim",
                        "metadata": {
                            "creationTimestamp": null,
                            "labels": {
                                "app.kubernetes.io/component": "primary",
                                "app.kubernetes.io/instance": "prerequisites",
                                "app.kubernetes.io/name": "mysql"
                            },
                            "name": "data"
                        },
                        "spec": {
                            "accessModes": [
                                "ReadWriteOnce"
                            ],
                            "resources": {
                                "requests": {
                                    "storage": "8Gi"
                                }
                            },
                            "volumeMode": "Filesystem"
                        },
                        "status": {
                            "phase": "Pending"
                        }
                    }
                ]
            },
            "status": {
                "availableReplicas": 0,
                "collisionCount": 0,
                "currentRevision": "prerequisites-mysql-767b8b57b5",
                "observedGeneration": 2,
                "replicas": 1,
                "updateRevision": "prerequisites-mysql-767b8b57b5"
            }
        }
    ],
    "kind": "List",
    "metadata": {
        "resourceVersion": ""
    }
}
